import TelegramBot from 'node-telegram-bot-api'
import express from 'express'
import cors from 'cors'
import dotenv from 'dotenv'
import {Database} from './db.js'
import {checkTransaction, get_collection_nfts, sendNft} from "./ton_connector.js"

dotenv.config()

const OWNER_ADDR = process.env.OWNER_ADDR
const COMMON_NFT_PRICE = process.env.COMMON_NFT_PRICE
const RARE_NFT_PRICE = process.env.RARE_NFT_PRICE

const db = new Database();
const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});
const app = express();

app.use(express.json());
app.use(cors())


let query_to_delete = {}

bot.on('text', async (msg) => {
    const chat_id = msg.chat.id;
    let text = msg.text;
    const username = msg.from.username;

    if (!chat_id) {
        console.log('chat_id in msg is null');
        return;
    }

    console.log(new Date(), " user: ", username, " send: ", text)

    if (text[0] === "/") {
        const arr = text.split(" ");
        const command = arr[0];

        if (command === '/start') {
            cmd_handler_start(chat_id, username);
        } else if (command === '/wallet') {
            cmd_handler_wallet(chat_id, arr[1]);
        } else if (command === '/get_collection_nfts') {
            const nfts = await get_collection_nfts(process.env.COLLECTION_ADDR)
            for (let i = 0; i < nfts.length; i++) {
                db.addNft(nfts[i].id, nfts[i].address, nfts[i].tier, (err) => {
                    console.log("err while addin' nfts: ", err)
                });
            }
        }
    }
});

bot.on('callback_query', async function onCallbackQuery(callbackQuery) {
    const sender = {
        id: callbackQuery.from.id,
        username: callbackQuery.from.username,
        action: callbackQuery.data,
    };
    const from_msg_id = callbackQuery.message.message_id
    if (!query_to_delete[sender.id]) {
        query_to_delete[sender.id] = []
    }
    query_to_delete[sender.id].push(from_msg_id)
    console.log(new Date(), " user: ", sender.username, " send action: ", sender.action)

    if (sender.action.includes(':')) {
        const command = sender.action.split(':')[0]
        if (command === 'add_wallet') {
            const user_wallet = sender.action.split(':')[1]
            const answer = `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${process.env.VERIFICATION_COST} TON –Ω–∞ –∞–¥—Ä–µ—Å \`${OWNER_ADDR}\`, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"`
            await bot.sendMessage(sender.id, answer, {
                parse_mode: `Markdown`,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', callback_data: `check_wallet:${user_wallet}`},
                        ]
                    ]
                }
            }).then();
        } else if (command === 'check_wallet') {
            const user_wallet = sender.action.split(':')[1]
            await checkTransaction(user_wallet, OWNER_ADDR, process.env.VERIFICATION_COST, (trans_send) => {
                if (trans_send) {
                    const wallet = sender.action.split(':')[1]
                    db.setUserWallet(sender.id, wallet)
                    bot.answerCallbackQuery(callbackQuery.id, {
                        text: `–í–∞—à –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`,
                    }).then();

                    const answer1 = `–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n` +
                        `–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–ª–æ –∑–∞ –º–∞–ª—ã–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å NFT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏. ü§î\n\n` +
                        `–£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –≤–∏–¥–∞ NFT - —ç—Ç–æ *–û–±—ã—á–Ω–∞—è* –∏ *–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è*, –º—ã —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª–∏ –≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É` +
                        `—ç—Ç–∏ NFT –≤ –Ω–∞—à–µ–º [–∫–∞–Ω–∞–ª–µ](https://t.me/meta_kotd)!\n` +
                        `–í–∏–∑—É–∞–ª—å–Ω–æ –∫–∞–∂–¥–∞—è NFT –≤ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –ø–æ—ç—Ç–æ–º—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫—É—é NFT –≤—ã –ø–æ–ª—É—á–∏–ª–∏, —Ç—ã —Å–º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏! üòº\n\n` +
                        `–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –≤—ã–±–æ—Ä–æ–º, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –∏–∑ –¥–≤—É—Ö NFT, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ *–∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É*.`
                    const buttons = [{text: `–û–±—ã—á–Ω–∞—è`, callback_data: `buy_common`},{text: `–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è`, callback_data: `buy_rare`}]

                    bot.sendMessage(sender.id, answer1, {
                        disable_web_page_preview: false,
                        parse_mode: `Markdown`,
                        reply_markup: {
                            inline_keyboard: [
                                buttons
                            ]
                        }
                    }).then();
                    deleteMessages(sender.id)

                } else {
                    bot.answerCallbackQuery(callbackQuery.id, {
                        text: `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥`,
                    }).then();
                }
            }).then();
        }
     }

    if (sender.action === 'wallet') {
        const answer = `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/wallet –∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞"`
        bot.sendMessage(sender.id, answer, {}).then();
    } else if (sender.action === 'no') {
        const answer = `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/wallet –∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞"`
        bot.sendMessage(sender.id, answer, {}).then();
    } else if (sender.action === 'continue') {
        call_continue(sender.id)
    } else if (sender.action === `buy_common`) {
        call_buy_common(sender.id)
    } else if (sender.action === `buy_rare`) {
        call_buy_rare(sender.id)
    } else if (sender.action === `send_common`) {
        call_send_common(sender.id, callbackQuery.id)
    } else if (sender.action === `send_rare`) {
        call_send_rare(sender.id, callbackQuery.id);
    }

});

function cmd_handler_start(chatId, username) {
    console.log(new Date(), " user ", username, " triggered cmd_handler_start")
    db.addUser(chatId, username, (is_new_user) => {});
    let answer = `*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ú–ï–¢–ê –ö–û(–î)–¢!* üéâ\n\n` +
                `–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –º–∏—Ä–µ *NFT*, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –¥–∞—Ä–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –Ω–æ–≤—ã–º –æ–ø—ã—Ç–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–º –≠–∫—Å–ø–µ—Ä—Ç–æ–º.\n\n` +
                `–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏  —Ü–µ–Ω–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ *NFT*, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–¥–µ–∏ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ù–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞.\n\n` +
                `–ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –º–∏—Ä–∞ *NFT*. –î–æ–≤–µ—Ä—å—Å—è **–ú–ï–¢–ê –ö–û(–î)–¢** –∏ –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –Ω–µ–æ–±—ã—á–Ω—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–º –≠–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.\n\n` +
                `*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT!* üí´`;
    const buttons = [{text: `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å`, callback_data: `continue`}]
    bot.sendMessage(chatId, answer, {
        parse_mode: `Markdown`,
        reply_markup: {
            inline_keyboard: [
                buttons
            ]
        }
    }).then();
}

function cmd_handler_wallet(chat_id, wallet) {
    const answer = `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ <a href="https://tonscan.org/address/${wallet}">${wallet}</a>?`
    bot.sendMessage(chat_id, answer, {
        parse_mode: `HTML`,
        disable_web_page_preview: false,
        reply_markup: {
            resize_keyboard: true,
            inline_keyboard: [
                [
                    {text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `add_wallet:${wallet}`},
                    {text: '–ù–µ—Ç', callback_data: `no`}
                ]
            ]
        }
    }).then();
}

function call_continue(sender_id) {
    db.userHasWallet(sender_id, (has_wallet) => {
        let buttons, answer;
        console.log(`sender ${sender_id} has wallet: ${has_wallet}`)
        if (has_wallet) {
            answer = `–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n` +
                `–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–ª–æ –∑–∞ –º–∞–ª—ã–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å NFT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏. ü§î\n\n` +
                `–£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –≤–∏–¥–∞ NFT - —ç—Ç–æ *–û–±—ã—á–Ω–∞—è* –∏ *–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è*, –º—ã —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª–∏ –≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É` +
                `—ç—Ç–∏ NFT –≤ –Ω–∞—à–µ–º [–∫–∞–Ω–∞–ª–µ](https://t.me/meta_kotd)!\n` +
                `–í–∏–∑—É–∞–ª—å–Ω–æ –∫–∞–∂–¥–∞—è NFT –≤ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –ø–æ—ç—Ç–æ–º—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫—É—é NFT –≤—ã –ø–æ–ª—É—á–∏–ª–∏, —Ç—ã —Å–º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏! üòº\n\n` +
                `–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –≤—ã–±–æ—Ä–æ–º, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –∏–∑ –¥–≤—É—Ö NFT, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ *–∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É*.`
            buttons = [{text: `–û–±—ã—á–Ω–∞—è`, callback_data: `buy_common`},{text: `–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è`, callback_data: `buy_rare`}]
        } else {
            answer = `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ TON.`;
            buttons = [{text: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫', callback_data: 'wallet'},]
        }
        bot.sendMessage(sender_id, answer, {
            disable_web_page_preview: true,
            parse_mode: `Markdown`,
            reply_markup: {
                resize_keyboard: true,
                inline_keyboard: [
                        buttons
                ]
            }
        }).then();
    });
}

function call_buy_common(sender_id) {
    db.getNotOwnedNfts((nfts) => {
        const nft = getRandomNft(nfts, 'common');
        const answer = `–î–ª—è –ø–æ–∫—É–ø–∫–∏ 1 **–û–±—ã—á–Ω–æ–π** NFT –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${COMMON_NFT_PRICE} TON –Ω–∞ –∞–¥—Ä–µ—Å \`${OWNER_ADDR}\`, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞".`;
        bot.sendMessage(sender_id, answer, {
            parse_mode: `Markdown`,
            reply_markup: {
                resize_keyboard: true,
                inline_keyboard: [
                    [
                        {text: '–û–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', callback_data: `send_common`},
                    ]
                ]
            }
        }).then();
    })
}

function call_buy_rare(sender_id) {
    const answer = `–î–ª—è –ø–æ–∫—É–ø–∫–∏ 1 *–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π* –∏–ª–∏ 5 *–û–±—ã—á–Ω–æ–π* NFT –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${RARE_NFT_PRICE} TON –Ω–∞ –∞–¥—Ä–µ—Å \`${OWNER_ADDR}\`, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞".`;
    bot.sendMessage(sender_id, answer, {
        parse_mode: `Markdown`,
        reply_markup: {
            resize_keyboard: true,
            inline_keyboard: [
                [
                    {text: '–û–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', callback_data: `send_rare`},
                ]
            ]
        }
    }).then();
}

function call_send_common(sender_id, callback_id) {
    db.getNotOwnedNfts((nfts) => {
        db.userHasWallet(sender_id, async (has_wallet, user_wallet) => {
            await checkTransaction(user_wallet, OWNER_ADDR, COMMON_NFT_PRICE, async (trans_send) => {
                console.log(`found transaction: ${trans_send}`)
                if (trans_send) {
                    const nft = getRandomNft(nfts, 'common');
                    console.log("random common: ", nft);

                    console.log(`set owner id:${sender_id} wallet:${user_wallet} for NFT id ${nft[0].id_nft}`);
                    await db.setNftOwner(nft[0].id_nft, sender_id, user_wallet)

                    console.log(`send ${nft[0].tier} nft addr:${nft[0].contract} to ${user_wallet}`);
                    await sendNft(user_wallet, nft[0].contract);

                    await bot.answerCallbackQuery(callback_id, {
                        parse_mode: `Markdown`,
                        text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`
                    }).then();

                    await deleteMessages(sender_id);

                    const answer = `*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ú–ï–¢–ê –ö–û(–î)–¢* üòª\n\n` +
                                    `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∞—è NFT –≤–∞–º –¥–æ—Å—Ç–∞–ª–∞—Å—å, –ø–æ–¥–∫–ª—é—á–∏–≤ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∫ —Å–∞–π—Ç—É !!!, —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –∏ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ—é NFT –Ω–∞ –¥—Ä—É–≥—É—é!\n\n` +
                                    `–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º [–∫–∞–Ω–∞–ª–µ](https://t.me/meta_kotd)!\n` +
                                    `*–°–∫–æ—Ä–æ —Ç–∞–º –±—É–¥—É—Ç –±–æ–ª—å—à–∏–µ –∞–Ω–æ–Ω—Å—ã*üôÄ`
                    await bot.sendMessage(sender_id, answer, {
                        parse_mode: `Markdown`,
                    }).then();
                } else {
                    bot.answerCallbackQuery(callback_id, {
                        text: `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥`,
                    }).then();
                }
            }).then();
        });
    });
}

function call_send_rare(sender_id, callback_id) {
    db.getNotOwnedNfts((nfts) => {
        db.userHasWallet(sender_id, async (has_wallet, user_wallet) => {
            await checkTransaction(user_wallet, OWNER_ADDR, RARE_NFT_PRICE, async (trans_send) => {
                if (trans_send) {
                    const nft = getRandomNft(nfts, 'rare');
                    console.log("random rare: ", nft);

                    for (let i = 0; i < nft.length; i++) {
                        // TODO fix for many nft sendin'
                        console.log(`${i}: set owner id:${sender_id} wallet:${user_wallet} for NFT id ${nft[i].id_nft}`);
                        await db.setNftOwner(nft[i].id_nft, sender_id, user_wallet);

                        console.log(`send ${nft[0].tier} nft addr:${nft[0].contract} to ${user_wallet}`);
                        await sendNft(user_wallet, nft[i].contract);
                    }

                    await bot.answerCallbackQuery(callback_id, {
                        parse_mode: `Markdown`,
                        text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`
                    }).then();

                    await deleteMessages(sender_id);

                    const answer = `*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ú–ï–¢–ê –ö–û(–î)–¢* üòª\n\n` +
                        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∞—è NFT –≤–∞–º –¥–æ—Å—Ç–∞–ª–∞—Å—å, –ø–æ–¥–∫–ª—é—á–∏–≤ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∫ —Å–∞–π—Ç—É !!!, —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –∏ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ—é NFT –Ω–∞ –¥—Ä—É–≥—É—é!\n\n` +
                        `–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º [–∫–∞–Ω–∞–ª–µ](https://t.me/meta_kotd)!\n` +
                        `*–°–∫–æ—Ä–æ —Ç–∞–º –±—É–¥—É—Ç –±–æ–ª—å—à–∏–µ –∞–Ω–æ–Ω—Å—ã*üôÄ`
                    await bot.sendMessage(sender_id, answer, {
                        parse_mode: `Markdown`
                    }).then();
                } else {
                    bot.answerCallbackQuery(callback_id, {
                        text: `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥`,
                    }).then();
                }
            }).then();
        });
    });
}

function getRandomNft(nfts, tier) {
    console.log(`get random ${tier} nft`)

    let result = [];
    if (tier === 'common') {
        const random_int = Math.floor(Math.random() * (nfts.common.length-1));
        result.push(nfts.common[random_int])
        return result;
    } else if (tier === 'rare') {
        const random_int = Math.floor(Math.random() * (nfts.rare.length - 1));

        if (nfts.common.length >= 5) {
            const return_rare = Math.floor(Math.random() * (2));
            console.log("return_rare: ", return_rare)

            // if (false) {
            if (return_rare) {
                result.push(nfts.rare[random_int])
                console.log("returned nfts: ", result)
                return result;
            } else {
                for (let i = 0; i < 1; i++) { // TODO set 5 nfts
                    const random_int = Math.floor(Math.random() * (nfts.common.length - 1));
                    const nft = nfts.common.splice(random_int,1)
                    result.push(nft[0]);
                }
                console.log("returned nfts: ", result)
                return result;
            }

        } else {
            console.log("returned nfts: ", result)
            return result.push(nfts.rare[random_int]);
        }
    }
}

async function deleteMessages(chatId) {
    for (let i = query_to_delete[chatId].length; i > 0; i--) {
        let next_id = query_to_delete[chatId].pop()
        console.log(`deleting message ${next_id} in chat ${chatId}`)
        try {
            await bot.deleteMessage(chatId, next_id).then(r => {})
        } catch(err) {
            console.log(`Error while deleting message ${next_id}: ${err}`)
        }
    }
}